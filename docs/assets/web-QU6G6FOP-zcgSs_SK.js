import{W as v,b as P,E as x}from"./index-3MS41buD.js";function g(w){const e=w.split("/").filter(t=>t!=="."),r=[];return e.forEach(t=>{t===".."&&r.length>0&&r[r.length-1]!==".."?r.pop():r.push(t)}),r.join("/")}function E(w,e){w=g(w),e=g(e);const r=w.split("/"),t=e.split("/");return w!==e&&r.every((i,s)=>i===t[s])}var R=class m extends v{constructor(){super(...arguments),this.DB_VERSION=1,this.DB_NAME="Disc",this._writeCmds=["add","put","delete"],this.downloadFile=async e=>{var r,t;const i=P(e,e.webFetchExtra),s=await fetch(e.url,i);let a;if(!e.progress)a=await s.blob();else if(!(s!=null&&s.body))a=new Blob;else{const c=s.body.getReader();let n=0;const d=[],h=s.headers.get("content-type"),f=parseInt(s.headers.get("content-length")||"0",10);for(;;){const{done:y,value:p}=await c.read();if(y)break;d.push(p),n+=(p==null?void 0:p.length)||0;const b={url:e.url,bytes:n,contentLength:f};this.notifyListeners("progress",b)}const u=new Uint8Array(n);let l=0;for(const y of d)typeof y>"u"||(u.set(y,l),l+=y.length);a=new Blob([u.buffer],{type:h||void 0})}return{path:(await this.writeFile({path:e.path,directory:(r=e.directory)!==null&&r!==void 0?r:void 0,recursive:(t=e.recursive)!==null&&t!==void 0?t:!1,data:a})).uri,blob:a}}}async initDb(){if(this._db!==void 0)return this._db;if(!("indexedDB"in window))throw this.unavailable("This browser doesn't support IndexedDB");return new Promise((e,r)=>{const t=indexedDB.open(this.DB_NAME,this.DB_VERSION);t.onupgradeneeded=m.doUpgrade,t.onsuccess=()=>{this._db=t.result,e(t.result)},t.onerror=()=>r(t.error),t.onblocked=()=>{console.warn("db blocked")}})}static doUpgrade(e){const t=e.target.result;switch(e.oldVersion){case 0:case 1:default:t.objectStoreNames.contains("FileStorage")&&t.deleteObjectStore("FileStorage"),t.createObjectStore("FileStorage",{keyPath:"path"}).createIndex("by_folder","folder")}}async dbRequest(e,r){const t=this._writeCmds.indexOf(e)!==-1?"readwrite":"readonly";return this.initDb().then(i=>new Promise((s,a)=>{const n=i.transaction(["FileStorage"],t).objectStore("FileStorage")[e](...r);n.onsuccess=()=>s(n.result),n.onerror=()=>a(n.error)}))}async dbIndexRequest(e,r,t){const i=this._writeCmds.indexOf(r)!==-1?"readwrite":"readonly";return this.initDb().then(s=>new Promise((a,o)=>{const h=s.transaction(["FileStorage"],i).objectStore("FileStorage").index(e)[r](...t);h.onsuccess=()=>a(h.result),h.onerror=()=>o(h.error)}))}getPath(e,r){const t=r!==void 0?r.replace(/^[/]+|[/]+$/g,""):"";let i="";return e!==void 0&&(i+="/"+e),r!==""&&(i+="/"+t),i}async clear(){(await this.initDb()).transaction(["FileStorage"],"readwrite").objectStore("FileStorage").clear()}async readFile(e){const r=this.getPath(e.directory,e.path),t=await this.dbRequest("get",[r]);if(t===void 0)throw Error("File does not exist.");return{data:t.content?t.content:""}}async writeFile(e){const r=this.getPath(e.directory,e.path);let t=e.data;const i=e.encoding,s=e.recursive,a=await this.dbRequest("get",[r]);if(a&&a.type==="directory")throw Error("The supplied path is a directory.");const o=r.substr(0,r.lastIndexOf("/"));if(await this.dbRequest("get",[o])===void 0){const h=o.indexOf("/",1);if(h!==-1){const f=o.substr(h);await this.mkdir({path:f,directory:e.directory,recursive:s})}}if(!i&&!(t instanceof Blob)&&(t=t.indexOf(",")>=0?t.split(",")[1]:t,!this.isBase64String(t)))throw Error("The supplied data is not valid base64 content.");const n=Date.now(),d={path:r,folder:o,type:"file",size:t instanceof Blob?t.size:t.length,ctime:n,mtime:n,content:t};return await this.dbRequest("put",[d]),{uri:d.path}}async appendFile(e){const r=this.getPath(e.directory,e.path);let t=e.data;const i=e.encoding,s=r.substr(0,r.lastIndexOf("/")),a=Date.now();let o=a;const c=await this.dbRequest("get",[r]);if(c&&c.type==="directory")throw Error("The supplied path is a directory.");if(await this.dbRequest("get",[s])===void 0){const h=s.indexOf("/",1);if(h!==-1){const f=s.substr(h);await this.mkdir({path:f,directory:e.directory,recursive:!0})}}if(!i&&!this.isBase64String(t))throw Error("The supplied data is not valid base64 content.");if(c!==void 0){if(c.content instanceof Blob)throw Error("The occupied entry contains a Blob object which cannot be appended to.");c.content!==void 0&&!i?t=btoa(atob(c.content)+atob(t)):t=c.content+t,o=c.ctime}const d={path:r,folder:s,type:"file",size:t.length,ctime:o,mtime:a,content:t};await this.dbRequest("put",[d])}async deleteFile(e){const r=this.getPath(e.directory,e.path);if(await this.dbRequest("get",[r])===void 0)throw Error("File does not exist.");if((await this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(r)])).length!==0)throw Error("Folder is not empty.");await this.dbRequest("delete",[r])}async mkdir(e){const r=this.getPath(e.directory,e.path),t=e.recursive,i=r.substr(0,r.lastIndexOf("/")),s=(r.match(/\//g)||[]).length,a=await this.dbRequest("get",[i]),o=await this.dbRequest("get",[r]);if(s===1)throw Error("Cannot create Root directory");if(o!==void 0)throw Error("Current directory does already exist.");if(!t&&s!==2&&a===void 0)throw Error("Parent directory must exist");if(t&&s!==2&&a===void 0){const d=i.substr(i.indexOf("/",1));await this.mkdir({path:d,directory:e.directory,recursive:t})}const c=Date.now(),n={path:r,folder:i,type:"directory",size:0,ctime:c,mtime:c};await this.dbRequest("put",[n])}async rmdir(e){const{path:r,directory:t,recursive:i}=e,s=this.getPath(t,r),a=await this.dbRequest("get",[s]);if(a===void 0)throw Error("Folder does not exist.");if(a.type!=="directory")throw Error("Requested path is not a directory");const o=await this.readdir({path:r,directory:t});if(o.files.length!==0&&!i)throw Error("Folder is not empty");for(const c of o.files){const n=`${r}/${c.name}`;(await this.stat({path:n,directory:t})).type==="file"?await this.deleteFile({path:n,directory:t}):await this.rmdir({path:n,directory:t,recursive:i})}await this.dbRequest("delete",[s])}async readdir(e){const r=this.getPath(e.directory,e.path),t=await this.dbRequest("get",[r]);if(e.path!==""&&t===void 0)throw Error("Folder does not exist.");const i=await this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(r)]);return{files:await Promise.all(i.map(async a=>{let o=await this.dbRequest("get",[a]);return o===void 0&&(o=await this.dbRequest("get",[a+"/"])),{name:a.substring(r.length+1),type:o.type,size:o.size,ctime:o.ctime,mtime:o.mtime,uri:o.path}}))}}async getUri(e){const r=this.getPath(e.directory,e.path);let t=await this.dbRequest("get",[r]);return t===void 0&&(t=await this.dbRequest("get",[r+"/"])),{uri:(t==null?void 0:t.path)||r}}async stat(e){const r=this.getPath(e.directory,e.path);let t=await this.dbRequest("get",[r]);if(t===void 0&&(t=await this.dbRequest("get",[r+"/"])),t===void 0)throw Error("Entry does not exist.");return{type:t.type,size:t.size,ctime:t.ctime,mtime:t.mtime,uri:t.path}}async rename(e){await this._copy(e,!0)}async copy(e){return this._copy(e,!1)}async requestPermissions(){return{publicStorage:"granted"}}async checkPermissions(){return{publicStorage:"granted"}}async _copy(e,r=!1){let{toDirectory:t}=e;const{to:i,from:s,directory:a}=e;if(!i||!s)throw Error("Both to and from must be provided");t||(t=a);const o=this.getPath(a,s),c=this.getPath(t,i);if(o===c)return{uri:c};if(E(o,c))throw Error("To path cannot contain the from path");let n;try{n=await this.stat({path:i,directory:t})}catch{const l=i.split("/");l.pop();const y=l.join("/");if(l.length>0&&(await this.stat({path:y,directory:t})).type!=="directory")throw new Error("Parent directory of the to path is a file")}if(n&&n.type==="directory")throw new Error("Cannot overwrite a directory with a file");const d=await this.stat({path:s,directory:a}),h=async(u,l,y)=>{const p=this.getPath(t,u),b=await this.dbRequest("get",[p]);b.ctime=l,b.mtime=y,await this.dbRequest("put",[b])},f=d.ctime?d.ctime:Date.now();switch(d.type){case"file":{const u=await this.readFile({path:s,directory:a});r&&await this.deleteFile({path:s,directory:a});let l;!(u.data instanceof Blob)&&!this.isBase64String(u.data)&&(l=x.UTF8);const y=await this.writeFile({path:i,directory:t,data:u.data,encoding:l});return r&&await h(i,f,d.mtime),y}case"directory":{if(n)throw Error("Cannot move a directory over an existing object");try{await this.mkdir({path:i,directory:t,recursive:!1}),r&&await h(i,f,d.mtime)}catch{}const u=(await this.readdir({path:s,directory:a})).files;for(const l of u)await this._copy({from:`${s}/${l.name}`,to:`${i}/${l.name}`,directory:a,toDirectory:t},r);r&&await this.rmdir({path:s,directory:a})}}return{uri:c}}isBase64String(e){try{return btoa(atob(e))==e}catch{return!1}}};R._debug=!0;export{R as FilesystemWeb};
